import asyncio
import os
from dotenv import load_dotenv

import random
import string
import datetime

from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from buttons import btn, btn_back, btn_weather
from weather import get_weather_req, execute_weather
from asyncio import sleep


load_dotenv()
TOKEN = os.getenv('API_TOKEN')

storage = MemoryStorage()

dp = Dispatcher(storage=storage)


class StateAction(StatesGroup):
    main = State()
    paswd = State()
    wait_for_input = State()
    weather = State()
    waiting_for_city = State()


@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    keyboard_menu = types.ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
    await message.answer(f'–í—ñ—Ç–∞—é, {message.from_user.full_name}!\n'
                        '–Ø - –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —É –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–æ–º—É –∂–∏—Ç—Ç—ñ.\n'
                        '–ù–∞—Ä–∞–∑—ñ —è –º–∞—é –¥–µ–∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –º–æ–∂—É—Ç—å —Ç–æ–±—ñ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—å.\n'
                        '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏ —Ç–∞ –∫–æ–º–∞–Ω–¥, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
                        reply_markup=keyboard_menu)
    await state.set_state(StateAction.main)


@dp.message(StateFilter(StateAction.main))
async def help_command(message: types.Message, state: FSMContext):
    if message.text == '–ö–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫':
        await message.answer('üé≤ –ö—Ä—É—á—É –∫—É–±–∏–∫...')
        await asyncio.sleep(2)
    
        result = await message.answer_dice()
        await asyncio.sleep(6)
        
        await message.answer(f'–í–∞–º –≤–∏–ø–∞–ª–æ —á–∏—Å–ª–æ {result.dice.value}')
        
        
    elif message.text == '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É/—á–∞—Å'.strip():
        await message.answer(f'‚è≥ –ó–∞—Ä–∞–∑ {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
        
        
    elif message.text == '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω–∏–π –ø–∞—Ä–æ–ª—å'.strip():
        await message.answer(f'üîê –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—é(1-9):')
        await state.set_state(StateAction.paswd)
        
    
    
@dp.message(StateAction.paswd)
async def generate_password(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 9!')
        return

    pass_len = int(message.text)  

    if pass_len < 1 or pass_len > 9:
        await message.answer('‚ùå –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 9 —Å–∏–º–≤–æ–ª—ñ–≤!')
        return  

    random_pass = ''.join(random.choices(string.ascii_letters + string.digits, k=pass_len))
    await message.answer(f'üîê –í–∞—à –ø–∞—Ä–æ–ª—å: `{random_pass}`', parse_mode="Markdown")
    await state.set_state(StateAction.main)
     

    
        
@dp.message(Command('weather'))
async def get_weather(message: types.Message, state=FSMContext):
    await state.set_state(StateAction.weather)
    keyboard_menu = types.ReplyKeyboardMarkup(keyboard=btn_weather, resize_keyboard=True)
    await message.answer(f'{message.from_user.first_name}, —Ç—É—Ç —Ç–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –¥–ª—è —Ç–≤–æ–≥–æ –º—ñ—Å—Ç–∞,–∞–±–æ –≤–∏–±—Ä–∞—Ç–∏ —ñ–∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö.')
    await message.answer('–û–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥—ñ—é...',reply_markup=keyboard_menu)


@dp.message(lambda message: message.text == '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –¥–ª—è —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞')
async def get_weather_city(message: types.Message, state=FSMContext):
    await message.answer(f'{message.from_user.first_name}, –≤–≤–µ–¥–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ, –∞–±–æ –≤–∏–±–µ—Ä–∏ –∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö')
    await state.set_state(StateAction.waiting_for_city)
    

@dp.message(StateAction.waiting_for_city)
async def process_req_city(message: types.Message, state:FSMContext):
    await execute_weather(message)
    await state.set_state(StateAction.main)
 
  
async def main() -> None:
    bot = Bot(TOKEN)
    await dp.start_polling(bot)
    
    
if __name__ == '__main__':
    asyncio.run(main())